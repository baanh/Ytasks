/* AUTO-GENERATED FILE. DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found. It
 * should not be modified by hand.
 */

package ttcnpm.dha.ytasks;

public final class R {
  public static final class array {
    public static final int job_category_array=0x7f010000;
    public static final int priority_array=0x7f010001;
    public static final int status_array=0x7f010002;
    public static final int task_type_array=0x7f010003;
  }
  public static final class attr {
    /**
     * When set to alignMargins, causes alignment to take place between the outer
     * boundary of a view, as defined by its margins. When set to alignBounds,
     * causes alignment to take place between the edges of the view.
     * The default is alignMargins.
     * See {@link android.widget.GridLayout#setAlignmentMode(int)}.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>alignBounds</td><td>0</td><td>Align the bounds of the children.
     * See {@link android.widget.GridLayout#ALIGN_BOUNDS}.</td></tr>
     * <tr><td>alignMargins</td><td>1</td><td>Align the margins of the children.
     * See {@link android.widget.GridLayout#ALIGN_MARGINS}.</td></tr>
     * </table>
     */
    public static final int alignmentMode=0x7f020000;
    /**
     * The maximum number of columns to create when automatically positioning children.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int columnCount=0x7f020001;
    /**
     * When set to true, forces column boundaries to appear in the same order
     * as column indices.
     * The default is true.
     * See {@link android.widget.GridLayout#setColumnOrderPreserved(boolean)}.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int columnOrderPreserved=0x7f020002;
    /**
     * The column boundary delimiting the left of the group of cells
     * occupied by this view.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int layout_column=0x7f020003;
    /**
     * The column span: the difference between the right and left
     * boundaries delimiting the group of cells occupied by this view.
     * The default is one.
     * See {@link android.widget.GridLayout.Spec}.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int layout_columnSpan=0x7f020004;
    /**
     * Gravity specifies how a component should be placed in its group of cells.
     * The default is LEFT | BASELINE.
     * See {@link android.widget.GridLayout.LayoutParams#setGravity(int)}.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
     * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the horizontal gravity: a left gravity will clip the right
     * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the vertical gravity: a top gravity will clip the bottom
     * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
     * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
     * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     */
    public static final int layout_gravity=0x7f020005;
    /**
     * The row boundary delimiting the top of the group of cells
     * occupied by this view.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int layout_row=0x7f020006;
    /**
     * The row span: the difference between the bottom and top
     * boundaries delimiting the group of cells occupied by this view.
     * The default is one.
     * See {@link android.widget.GridLayout.Spec}.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int layout_rowSpan=0x7f020007;
    /**
     * The orientation property is not used during layout. It is only used to
     * allocate row and column parameters when they are not specified by its children's
     * layout parameters. GridLayout works like LinearLayout in this case;
     * putting all the components either in a single row or in a single column -
     * depending on the value of this flag. In the horizontal case, a columnCount
     * property may be additionally supplied to force new rows to be created when a
     * row is full. The rowCount attribute may be used similarly in the vertical case.
     * The default is horizontal.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>horizontal</td><td>0</td><td>Defines an horizontal widget.</td></tr>
     * <tr><td>vertical</td><td>1</td><td>Defines a vertical widget.</td></tr>
     * </table>
     */
    public static final int orientation=0x7f020008;
    /**
     * The maximum number of rows to create when automatically positioning children.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int rowCount=0x7f020009;
    /**
     * When set to true, forces row boundaries to appear in the same order
     * as row indices.
     * The default is true.
     * See {@link android.widget.GridLayout#setRowOrderPreserved(boolean)}.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int rowOrderPreserved=0x7f02000a;
    /**
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int trimLength=0x7f02000b;
    /**
     * When set to true, tells GridLayout to use default margins when none are specified
     * in a view's layout parameters.
     * The default value is false.
     * See {@link android.widget.GridLayout#setUseDefaultMargins(boolean)}.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int useDefaultMargins=0x7f02000c;
  }
  public static final class dimen {
    public static final int activity_horizontal_margin=0x7f030000;
    public static final int activity_vertical_margin=0x7f030001;
    public static final int default_gap=0x7f030002;
  }
  public static final class drawable {
    public static final int app_logo=0x7f040000;
    public static final int background=0x7f040001;
    public static final int background_white=0x7f040002;
    public static final int btn_del=0x7f040003;
    public static final int btn_login=0x7f040004;
    public static final int btn_plus=0x7f040005;
    public static final int btn_plus_mdpi=0x7f040006;
    public static final int ic_folder=0x7f040007;
    public static final int ic_launcher_ytasks=0x7f040008;
    public static final int ic_ytasks=0x7f040009;
    public static final int s=0x7f04000a;
    public static final int step_item=0x7f04000b;
    public static final int ytaskname=0x7f04000c;
  }
  public static final class id {
    public static final int CheckListBox=0x7f050000;
    public static final int LinearLayout1=0x7f050001;
    public static final int RelativeLayout1=0x7f050002;
    public static final int TaskDecripField=0x7f050003;
    public static final int TaskDueDay=0x7f050004;
    public static final int TaskOfCheckListDueDay=0x7f050005;
    public static final int TaskOfCheckListTittle=0x7f050006;
    public static final int TaskSpendTime=0x7f050007;
    public static final int TaskSpinPriority=0x7f050008;
    public static final int TaskStartDay=0x7f050009;
    public static final int TaskTilleField=0x7f05000a;
    public static final int action_create_category=0x7f05000b;
    public static final int action_delete_category=0x7f05000c;
    public static final int action_edit_category=0x7f05000d;
    public static final int action_new_check_list=0x7f05000e;
    public static final int action_new_task=0x7f05000f;
    public static final int action_select_category=0x7f050010;
    public static final int action_settings=0x7f050011;
    public static final int alignBounds=0x7f050012;
    public static final int alignMargins=0x7f050013;
    public static final int app_brand=0x7f050014;
    public static final int bottom=0x7f050015;
    public static final int btnAddTaskOnCheckList=0x7f050016;
    public static final int btnAlrDate=0x7f050017;
    public static final int btnAlrtTime=0x7f050018;
    public static final int btnCreate=0x7f050019;
    public static final int btnCreateNewCheckList=0x7f05001a;
    public static final int btnCreateNewGroup=0x7f05001b;
    public static final int btnDDate=0x7f05001c;
    public static final int btnDelTask=0x7f05001d;
    public static final int btnEditTask=0x7f05001e;
    public static final int btnLogin=0x7f05001f;
    public static final int btnSDate=0x7f050020;
    public static final int btnSaveNewAccount=0x7f050021;
    public static final int btnSaveTask=0x7f050022;
    public static final int cateDesc=0x7f050023;
    public static final int cateName=0x7f050024;
    public static final int ccontName=0x7f050025;
    public static final int ccontNo=0x7f050026;
    public static final int ccontType=0x7f050027;
    public static final int center=0x7f050028;
    public static final int center_horizontal=0x7f050029;
    public static final int center_vertical=0x7f05002a;
    public static final int checkBox1=0x7f05002b;
    public static final int clip_horizontal=0x7f05002c;
    public static final int clip_vertical=0x7f05002d;
    public static final int create_category=0x7f05002e;
    public static final int editJobCategory=0x7f05002f;
    public static final int editJobDescription=0x7f050030;
    public static final int editJobName=0x7f050031;
    public static final int editTaskDecripField=0x7f050032;
    public static final int editTaskSpendTime=0x7f050033;
    public static final int editTaskTilleField=0x7f050034;
    public static final int editTextBirthday=0x7f050035;
    public static final int end=0x7f050036;
    public static final int expandableListViewAssignee=0x7f050037;
    public static final int fill=0x7f050038;
    public static final int fill_horizontal=0x7f050039;
    public static final int fill_vertical=0x7f05003a;
    public static final int folderView=0x7f05003b;
    public static final int gvCategory=0x7f05003c;
    public static final int horizontal=0x7f05003d;
    public static final int imgAvatar=0x7f05003e;
    public static final int imgBtn_catagory=0x7f05003f;
    public static final int imgBtn_folder=0x7f050040;
    public static final int lblGroupDescription=0x7f050041;
    public static final int lblGroupName=0x7f050042;
    public static final int left=0x7f050043;
    public static final int listGroupJob=0x7f050044;
    public static final int listTaskOfCheckList=0x7f050045;
    public static final int list_result_check_list=0x7f050046;
    public static final int llGroupName=0x7f050047;
    public static final int newEmailField=0x7f050048;
    public static final int newFacebookField=0x7f050049;
    public static final int newFirstNameField=0x7f05004a;
    public static final int newLastNameField=0x7f05004b;
    public static final int newPassField=0x7f05004c;
    public static final int newPhoneField=0x7f05004d;
    public static final int newTaskDecripField=0x7f05004e;
    public static final int newTaskSpendTime=0x7f05004f;
    public static final int newTaskTilleField=0x7f050050;
    public static final int quickContact=0x7f050051;
    public static final int result_check_list_name=0x7f050052;
    public static final int right=0x7f050053;
    public static final int rlCategory=0x7f050054;
    public static final int scrollView1=0x7f050055;
    public static final int seekBar1=0x7f050056;
    public static final int spinPriority=0x7f050057;
    public static final int spinStatus=0x7f050058;
    public static final int start=0x7f050059;
    public static final int taskSpinStatus=0x7f05005a;
    public static final int textView1=0x7f05005b;
    public static final int textView11=0x7f05005c;
    public static final int textView12=0x7f05005d;
    public static final int textView15=0x7f05005e;
    public static final int textView2=0x7f05005f;
    public static final int textView3=0x7f050060;
    public static final int textView4=0x7f050061;
    public static final int textView5=0x7f050062;
    public static final int textView9=0x7f050063;
    public static final int textView_DueDay=0x7f050064;
    public static final int textView_TaskList_name=0x7f050065;
    public static final int top=0x7f050066;
    public static final int txtCatagoryName=0x7f050067;
    public static final int txtGroupDescription=0x7f050068;
    public static final int txtGroupName=0x7f050069;
    public static final int txtJob=0x7f05006a;
    public static final int txtJobItem=0x7f05006b;
    public static final int txtName=0x7f05006c;
    public static final int txtPassword=0x7f05006d;
    public static final int txtPercent=0x7f05006e;
    public static final int txtSearchContactQuery=0x7f05006f;
    public static final int txtSignUp=0x7f050070;
    public static final int txtUsername=0x7f050071;
    public static final int txtViewDueDay=0x7f050072;
    public static final int vertical=0x7f050073;
  }
  public static final class layout {
    public static final int activity_check_list_detail=0x7f060000;
    public static final int activity_check_list_filter_result=0x7f060001;
    public static final int activity_edit_task=0x7f060002;
    public static final int activity_folder=0x7f060003;
    public static final int activity_group_job=0x7f060004;
    public static final int activity_login=0x7f060005;
    public static final int activity_new_account=0x7f060006;
    public static final int activity_new_check_list=0x7f060007;
    public static final int activity_new_task=0x7f060008;
    public static final int activity_task=0x7f060009;
    public static final int category=0x7f06000a;
    public static final int category_item=0x7f06000b;
    public static final int check_list_item=0x7f06000c;
    public static final int contact_item_view=0x7f06000d;
    public static final int dialog_new_category=0x7f06000e;
    public static final int folder_item=0x7f06000f;
    public static final int list_each_group_job=0x7f060010;
    public static final int new_group_job_pop_up=0x7f060011;
    public static final int step_item=0x7f060012;
    public static final int task_list_item=0x7f060013;
    public static final int ytask_spinner_dropdown_item=0x7f060014;
  }
  public static final class menu {
    public static final int category=0x7f070000;
    public static final int category_context_menu=0x7f070001;
    public static final int check_list_detail=0x7f070002;
    public static final int check_list_filter_result=0x7f070003;
    public static final int edit_task=0x7f070004;
    public static final int folder=0x7f070005;
    public static final int group_job=0x7f070006;
    public static final int login=0x7f070007;
    public static final int new_account=0x7f070008;
    public static final int new_task=0x7f070009;
    public static final int task=0x7f07000a;
  }
  public static final class raw {
    public static final int ytaskalarm=0x7f080000;
  }
  public static final class string {
    public static final int action_create_category=0x7f090000;
    public static final int action_delete_category=0x7f090001;
    public static final int action_edit_category=0x7f090002;
    public static final int action_select_category=0x7f090003;
    public static final int action_settings=0x7f090004;
    public static final int app_name=0x7f090005;
    public static final int btn_lbl_add=0x7f090006;
    public static final int btn_lbl_save=0x7f090007;
    public static final int hello_world=0x7f090008;
    public static final int hint_edittext_login_name=0x7f090009;
    public static final int hint_edittext_login_pass=0x7f09000a;
    public static final int lbl_birthday=0x7f09000b;
    public static final int lbl_email=0x7f09000c;
    public static final int lbl_facebook=0x7f09000d;
    public static final int lbl_first_name=0x7f09000e;
    public static final int lbl_last_name=0x7f09000f;
    public static final int lbl_password=0x7f090010;
    public static final int lbl_phone=0x7f090011;
    public static final int new_task_description=0x7f090012;
    public static final int new_task_done=0x7f090013;
    public static final int new_task_due_day=0x7f090014;
    public static final int new_task_priority=0x7f090015;
    public static final int new_task_spend_time=0x7f090016;
    public static final int new_task_start_day=0x7f090017;
    public static final int new_task_status=0x7f090018;
    public static final int new_task_title=0x7f090019;
    public static final int numOfGvCategory=0x7f09001a;
    public static final int title_activity_check_list_detail=0x7f09001b;
    public static final int title_activity_edit_task=0x7f09001c;
    public static final int title_activity_folder=0x7f09001d;
    public static final int title_activity_group_job=0x7f09001e;
    public static final int title_activity_new_account=0x7f09001f;
    public static final int title_activity_new_check_list=0x7f090020;
    public static final int title_activity_new_task=0x7f090021;
    public static final int title_activity_task=0x7f090022;
  }
  public static final class style {
    public static final int AppBaseTheme=0x7f0a0000;
    public static final int AppTheme=0x7f0a0001;
  }
  public static final class styleable {
    /**
     * Attributes that can be used with a ExpandableTextView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ExpandableTextView_trimLength ttcnpm.dha.ytasks:trimLength}</code></td><td></td></tr>
     * </table>
     * @see #ExpandableTextView_trimLength
     */
    public static final int[] ExpandableTextView={
      0x7f02000b
    };
    /**
     * <p>This symbol is the offset where the {@link ttcnpm.dha.ytasks.R.attr#trimLength}
     * attribute's value can be found in the {@link #ExpandableTextView} array.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name ttcnpm.dha.ytasks:trimLength
     */
    public static final int ExpandableTextView_trimLength=0;
    /**
     * Attributes that can be used with a GridLayout.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #GridLayout_alignmentMode ttcnpm.dha.ytasks:alignmentMode}</code></td><td>When set to alignMargins, causes alignment to take place between the outer
     * boundary of a view, as defined by its margins.</td></tr>
     * <tr><td><code>{@link #GridLayout_columnCount ttcnpm.dha.ytasks:columnCount}</code></td><td>The maximum number of columns to create when automatically positioning children.</td></tr>
     * <tr><td><code>{@link #GridLayout_columnOrderPreserved ttcnpm.dha.ytasks:columnOrderPreserved}</code></td><td>When set to true, forces column boundaries to appear in the same order
     * as column indices.</td></tr>
     * <tr><td><code>{@link #GridLayout_orientation ttcnpm.dha.ytasks:orientation}</code></td><td>The orientation property is not used during layout.</td></tr>
     * <tr><td><code>{@link #GridLayout_rowCount ttcnpm.dha.ytasks:rowCount}</code></td><td>The maximum number of rows to create when automatically positioning children.</td></tr>
     * <tr><td><code>{@link #GridLayout_rowOrderPreserved ttcnpm.dha.ytasks:rowOrderPreserved}</code></td><td>When set to true, forces row boundaries to appear in the same order
     * as row indices.</td></tr>
     * <tr><td><code>{@link #GridLayout_useDefaultMargins ttcnpm.dha.ytasks:useDefaultMargins}</code></td><td>When set to true, tells GridLayout to use default margins when none are specified
     * in a view's layout parameters.</td></tr>
     * </table>
     * @see #GridLayout_alignmentMode
     * @see #GridLayout_columnCount
     * @see #GridLayout_columnOrderPreserved
     * @see #GridLayout_orientation
     * @see #GridLayout_rowCount
     * @see #GridLayout_rowOrderPreserved
     * @see #GridLayout_useDefaultMargins
     */
    public static final int[] GridLayout={
      0x7f020000, 0x7f020001, 0x7f020002, 0x7f020008, 
      0x7f020009, 0x7f02000a, 0x7f02000c
    };
    /**
     * <p>
     * @attr description
     * When set to alignMargins, causes alignment to take place between the outer
     * boundary of a view, as defined by its margins. When set to alignBounds,
     * causes alignment to take place between the edges of the view.
     * The default is alignMargins.
     * See {@link android.widget.GridLayout#setAlignmentMode(int)}.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>alignBounds</td><td>0</td><td>Align the bounds of the children.
     * See {@link android.widget.GridLayout#ALIGN_BOUNDS}.</td></tr>
     * <tr><td>alignMargins</td><td>1</td><td>Align the margins of the children.
     * See {@link android.widget.GridLayout#ALIGN_MARGINS}.</td></tr>
     * </table>
     *
     * @attr name ttcnpm.dha.ytasks:alignmentMode
     */
    public static final int GridLayout_alignmentMode=0;
    /**
     * <p>
     * @attr description
     * The maximum number of columns to create when automatically positioning children.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name ttcnpm.dha.ytasks:columnCount
     */
    public static final int GridLayout_columnCount=1;
    /**
     * <p>
     * @attr description
     * When set to true, forces column boundaries to appear in the same order
     * as column indices.
     * The default is true.
     * See {@link android.widget.GridLayout#setColumnOrderPreserved(boolean)}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name ttcnpm.dha.ytasks:columnOrderPreserved
     */
    public static final int GridLayout_columnOrderPreserved=2;
    /**
     * <p>
     * @attr description
     * The orientation property is not used during layout. It is only used to
     * allocate row and column parameters when they are not specified by its children's
     * layout parameters. GridLayout works like LinearLayout in this case;
     * putting all the components either in a single row or in a single column -
     * depending on the value of this flag. In the horizontal case, a columnCount
     * property may be additionally supplied to force new rows to be created when a
     * row is full. The rowCount attribute may be used similarly in the vertical case.
     * The default is horizontal.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>horizontal</td><td>0</td><td>Defines an horizontal widget.</td></tr>
     * <tr><td>vertical</td><td>1</td><td>Defines a vertical widget.</td></tr>
     * </table>
     *
     * @attr name ttcnpm.dha.ytasks:orientation
     */
    public static final int GridLayout_orientation=3;
    /**
     * <p>
     * @attr description
     * The maximum number of rows to create when automatically positioning children.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name ttcnpm.dha.ytasks:rowCount
     */
    public static final int GridLayout_rowCount=4;
    /**
     * <p>
     * @attr description
     * When set to true, forces row boundaries to appear in the same order
     * as row indices.
     * The default is true.
     * See {@link android.widget.GridLayout#setRowOrderPreserved(boolean)}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name ttcnpm.dha.ytasks:rowOrderPreserved
     */
    public static final int GridLayout_rowOrderPreserved=5;
    /**
     * <p>
     * @attr description
     * When set to true, tells GridLayout to use default margins when none are specified
     * in a view's layout parameters.
     * The default value is false.
     * See {@link android.widget.GridLayout#setUseDefaultMargins(boolean)}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name ttcnpm.dha.ytasks:useDefaultMargins
     */
    public static final int GridLayout_useDefaultMargins=6;
    /**
     * Attributes that can be used with a GridLayout_Layout.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #GridLayout_Layout_android_layout_width android:layout_width}</code></td><td></td></tr>
     * <tr><td><code>{@link #GridLayout_Layout_android_layout_height android:layout_height}</code></td><td></td></tr>
     * <tr><td><code>{@link #GridLayout_Layout_android_layout_margin android:layout_margin}</code></td><td></td></tr>
     * <tr><td><code>{@link #GridLayout_Layout_android_layout_marginLeft android:layout_marginLeft}</code></td><td></td></tr>
     * <tr><td><code>{@link #GridLayout_Layout_android_layout_marginTop android:layout_marginTop}</code></td><td></td></tr>
     * <tr><td><code>{@link #GridLayout_Layout_android_layout_marginRight android:layout_marginRight}</code></td><td></td></tr>
     * <tr><td><code>{@link #GridLayout_Layout_android_layout_marginBottom android:layout_marginBottom}</code></td><td></td></tr>
     * <tr><td><code>{@link #GridLayout_Layout_layout_column ttcnpm.dha.ytasks:layout_column}</code></td><td>The column boundary delimiting the left of the group of cells
     * occupied by this view.</td></tr>
     * <tr><td><code>{@link #GridLayout_Layout_layout_columnSpan ttcnpm.dha.ytasks:layout_columnSpan}</code></td><td>The column span: the difference between the right and left
     * boundaries delimiting the group of cells occupied by this view.</td></tr>
     * <tr><td><code>{@link #GridLayout_Layout_layout_gravity ttcnpm.dha.ytasks:layout_gravity}</code></td><td>Gravity specifies how a component should be placed in its group of cells.</td></tr>
     * <tr><td><code>{@link #GridLayout_Layout_layout_row ttcnpm.dha.ytasks:layout_row}</code></td><td>The row boundary delimiting the top of the group of cells
     * occupied by this view.</td></tr>
     * <tr><td><code>{@link #GridLayout_Layout_layout_rowSpan ttcnpm.dha.ytasks:layout_rowSpan}</code></td><td>The row span: the difference between the bottom and top
     * boundaries delimiting the group of cells occupied by this view.</td></tr>
     * </table>
     * @see #GridLayout_Layout_android_layout_width
     * @see #GridLayout_Layout_android_layout_height
     * @see #GridLayout_Layout_android_layout_margin
     * @see #GridLayout_Layout_android_layout_marginLeft
     * @see #GridLayout_Layout_android_layout_marginTop
     * @see #GridLayout_Layout_android_layout_marginRight
     * @see #GridLayout_Layout_android_layout_marginBottom
     * @see #GridLayout_Layout_layout_column
     * @see #GridLayout_Layout_layout_columnSpan
     * @see #GridLayout_Layout_layout_gravity
     * @see #GridLayout_Layout_layout_row
     * @see #GridLayout_Layout_layout_rowSpan
     */
    public static final int[] GridLayout_Layout={
      0x010100f4, 0x010100f5, 0x010100f6, 0x010100f7, 
      0x010100f8, 0x010100f9, 0x010100fa, 0x7f020003, 
      0x7f020004, 0x7f020005, 0x7f020006, 0x7f020007
    };
    /**
     * <p>
     * @attr description
     * START MarginLayout layoutparams
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>wrap_content</td><td>fffffffe</td><td></td></tr>
     * <tr><td>fill_parent</td><td>ffffffff</td><td></td></tr>
     * <tr><td>match_parent</td><td>ffffffff</td><td></td></tr>
     * </table>
     *
     * @attr name android:layout_width
     */
    public static final int GridLayout_Layout_android_layout_width=0;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#layout_height}
     * attribute's value can be found in the {@link #GridLayout_Layout} array.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>wrap_content</td><td>fffffffe</td><td></td></tr>
     * <tr><td>fill_parent</td><td>ffffffff</td><td></td></tr>
     * <tr><td>match_parent</td><td>ffffffff</td><td></td></tr>
     * </table>
     *
     * @attr name android:layout_height
     */
    public static final int GridLayout_Layout_android_layout_height=1;
    /**
     * <p>
     * @attr description
     * Specifies extra space on the left, top, right and bottom
     * sides of this view. This space is outside this view's bounds.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:layout_margin
     */
    public static final int GridLayout_Layout_android_layout_margin=2;
    /**
     * <p>
     * @attr description
     * Specifies extra space on the left side of this view.
     * This space is outside this view's bounds.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:layout_marginLeft
     */
    public static final int GridLayout_Layout_android_layout_marginLeft=3;
    /**
     * <p>
     * @attr description
     * Specifies extra space on the top side of this view.
     * This space is outside this view's bounds.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:layout_marginTop
     */
    public static final int GridLayout_Layout_android_layout_marginTop=4;
    /**
     * <p>
     * @attr description
     * Specifies extra space on the right side of this view.
     * This space is outside this view's bounds.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:layout_marginRight
     */
    public static final int GridLayout_Layout_android_layout_marginRight=5;
    /**
     * <p>
     * @attr description
     * Specifies extra space on the bottom side of this view.
     * This space is outside this view's bounds.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:layout_marginBottom
     */
    public static final int GridLayout_Layout_android_layout_marginBottom=6;
    /**
     * <p>
     * @attr description
     * The column boundary delimiting the left of the group of cells
     * occupied by this view.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name ttcnpm.dha.ytasks:layout_column
     */
    public static final int GridLayout_Layout_layout_column=7;
    /**
     * <p>
     * @attr description
     * The column span: the difference between the right and left
     * boundaries delimiting the group of cells occupied by this view.
     * The default is one.
     * See {@link android.widget.GridLayout.Spec}.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name ttcnpm.dha.ytasks:layout_columnSpan
     */
    public static final int GridLayout_Layout_layout_columnSpan=8;
    /**
     * <p>
     * @attr description
     * Gravity specifies how a component should be placed in its group of cells.
     * The default is LEFT | BASELINE.
     * See {@link android.widget.GridLayout.LayoutParams#setGravity(int)}.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
     * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the horizontal gravity: a left gravity will clip the right
     * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the vertical gravity: a top gravity will clip the bottom
     * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
     * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
     * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     *
     * @attr name ttcnpm.dha.ytasks:layout_gravity
     */
    public static final int GridLayout_Layout_layout_gravity=9;
    /**
     * <p>
     * @attr description
     * The row boundary delimiting the top of the group of cells
     * occupied by this view.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name ttcnpm.dha.ytasks:layout_row
     */
    public static final int GridLayout_Layout_layout_row=10;
    /**
     * <p>
     * @attr description
     * The row span: the difference between the bottom and top
     * boundaries delimiting the group of cells occupied by this view.
     * The default is one.
     * See {@link android.widget.GridLayout.Spec}.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name ttcnpm.dha.ytasks:layout_rowSpan
     */
    public static final int GridLayout_Layout_layout_rowSpan=11;
  }
}